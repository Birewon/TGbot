from telebot import types
import telebot
import time
import os
from dotenv import load_dotenv
from telebot.types import ReplyKeyboardRemove

load_dotenv()

bot = telebot.TeleBot(os.getenv('BOT_TOKEN'))  #–¢–æ–∫–µ–Ω –±–æ—Ç–∞




@bot.message_handler(commands=['start'])
def start_1(message):
    markup = types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
    btn1 = types.KeyboardButton('üçé –Ø–±–ª–æ–∫–æ')
    btn2 = types.KeyboardButton('üçå –ë–∞–Ω–∞–Ω')
    btn3 = types.KeyboardButton('üçä –ê–ø–µ–ª—å—Å–∏–Ω')
    btn4 = types.KeyboardButton('ü•í –ö –æ–≤–æ—â–∞–º')
    btn5 = types.KeyboardButton('‚ùå –°–∫—Ä—ã—Ç—å')
    markup.add(btn1, btn2, btn3, btn4, btn5)

    bot.send_message(message.chat.id, "–ö–∞–∫–æ–π —Ñ—Ä—É–∫—Ç –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text in ['üçé –Ø–±–ª–æ–∫–æ', 'üçå –ë–∞–Ω–∞–Ω', 'üçä –ê–ø–µ–ª—å—Å–∏–Ω', '‚ùå –°–∫—Ä—ã—Ç—å', 'ü•í –ö –æ–≤–æ—â–∞–º'])
def answer_fruits(message):
    fruit = message.text
    match fruit:
        case 'üçé –Ø–±–ª–æ–∫–æ':
            response = "–Ø–±–ª–æ–∫–∏ –ø–æ–ª–µ–∑–Ω—ã –¥–ª—è —Å–µ—Ä–¥—Ü–∞! ‚ù§Ô∏è"
        case 'üçå –ë–∞–Ω–∞–Ω':
            response = "–ë–∞–Ω–∞–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç –∫–∞–ª–∏–π –¥–ª—è –º—ã—à—Ü! üí™"
        case 'üçä –ê–ø–µ–ª—å—Å–∏–Ω':
            response = "–ê–ø–µ–ª—å—Å–∏–Ω—ã —É–∫—Ä–µ–ø–ª—è—é—Ç –∏–º–º—É–Ω–∏—Ç–µ—Ç! üõ°Ô∏è"
        case '‚ùå –°–∫—Ä—ã—Ç—å':
            bot.send_message(message.chat.id, "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–∫—Ä—ã—Ç–∞!", reply_markup=ReplyKeyboardRemove())
            return
        case 'ü•í –ö –æ–≤–æ—â–∞–º':
            confirm_markup = types.InlineKeyboardMarkup(row_width=2)
            conf_btn1 = types.InlineKeyboardButton('–î–∞', callback_data='confirm_veg')
            conf_btn2 = types.InlineKeyboardButton('–ù–µ—Ç', callback_data='cancel_veg')
            confirm_markup.add(conf_btn1, conf_btn2)
            bot.send_message(message.chat.id, '–í—ã —Ç–æ—á–Ω–æ —Ö–æ–∏—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–≤–æ—â–∞–º?', reply_markup=confirm_markup)
            return

    bot.send_message(message.chat.id, response)

@bot.callback_query_handler(func=lambda call: True)
def hundle_callback(call):
    if call.data == 'confirm_veg':
        bot.delete_message(call.message.chat.id, call.message.message_id)

        markup_veg = types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
        markup_veg.add(
            types.KeyboardButton('ü•ï –ú–æ—Ä–∫–æ–≤—å'),
            types.KeyboardButton('ü•¶ –ë—Ä–æ–∫–∫–æ–ª–∏'),
            types.KeyboardButton('üçÖ –ü–æ–º–∏–¥–æ—Ä'),
            types.KeyboardButton('üçé –ö —Ñ—Ä—É–∫—Ç–∞–º'),
            types.KeyboardButton('‚ùå –°–∫—Ä—ã—Ç—å'),
        )
        bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –æ–≤–æ—â:', reply_markup=markup_veg)
    elif call.data == 'cancel_veg':
        bot.delete_message(call.message.chat.id, call.message.message_id)

        bot.send_message(call.message.chat.id, '–û—Å—Ç–∞–µ–º—Å—è —Å —Ñ—Ä—É–∫—Ç–∞–º–∏!')

@bot.message_handler(func=lambda message: message.text in ['ü•ï –ú–æ—Ä–∫–æ–≤—å','ü•¶ –ë—Ä–æ–∫–∫–æ–ª–∏','üçÖ –ü–æ–º–∏–¥–æ—Ä','üçé –ö —Ñ—Ä—É–∫—Ç–∞–º','‚ùå –°–∫—Ä—ã—Ç—å'])
def answer_vegetables(message):
    veget = message.text
    match veget:
        case 'ü•ï –ú–æ—Ä–∫–æ–≤—å':
            response = '–ú–æ—Ä–∫–æ–≤—å –ø–æ–ª–µ–∑–Ω–∞ –¥–ª—è –∑—Ä–µ–Ω–∏—è! üëÄ'
        case 'ü•¶ –ë—Ä–æ–∫–∫–æ–ª–∏':
            response = '–ë—Ä–æ–∫–∫–æ–ª–∏ –±–æ–≥–∞—Ç–∞ –≤–∏—Ç–∞–º–∏–Ω–æ–º K! üíä'
        case 'üçÖ –ü–æ–º–∏–¥–æ—Ä':
            response = '–ü–æ–º–∏–¥–æ—Ä—ã —Å–æ–¥–µ—Ä–∂–∞—Ç –ª–∏–∫–æ–ø–∏–Ω! üî¥'
        case 'üçé –ö —Ñ—Ä—É–∫—Ç–∞–º':
            bot.send_message(message.chat.id, '–í–µ—Ä–Ω–µ–º—Å—è –∫ —Ñ—Ä—É–∫—Ç–∞–º!')
            time.sleep(1)
            bot.delete_message(message.chat.id, message.message_id)
            start_1(message)
        case '‚ùå –°–∫—Ä—ã—Ç—å':
            bot.send_message(message.chat.id, "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–∫—Ä—ã—Ç–∞!", reply_markup=ReplyKeyboardRemove())
            return
    bot.send_message(message.chat.id, response)


bot.infinity_polling()